{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\nconst getGameField = document.querySelector('.game-field');\nconst getButton = document.querySelector('.button');\nconst getScore = document.querySelector('.game-score');\n\nconst getMessageLose = document.querySelector('.message-lose');\nconst getMessageWin = document.querySelector('.message-win');\nconst getMessageStart = document.querySelector('.message-start');\n\nconst GRID_SIZE = 4;\nconst INITIAL_SCORE = 0;\nconst WIN_NUM = 2048;\nlet score = 0;\nlet board = [];\n\n// Initialize Game\nfunction initializeGame() {\n  resetGameBoard();\n  setRandomCell();\n  setRandomCell();\n  updateScore();\n}\n\nfunction resetGameBoard() {\n  board = Array.from({ length: GRID_SIZE }, () => Array(GRID_SIZE).fill(0));\n  renderCell();\n}\n\nfunction updateScore() {\n  getScore.textContent = INITIAL_SCORE;\n}\n\n// Set random cells\nfunction isEmptyField() {\n  return board.some((row) => row.some((cell) => cell === 0));\n}\n\nfunction setRandomCell() {\n  if (!isEmptyField()) {\n    return;\n  }\n\n  let r, c;\n\n  do {\n    r = Math.floor(Math.random() * GRID_SIZE);\n    c = Math.floor(Math.random() * GRID_SIZE);\n  } while (board[r][c] !== 0);\n\n  board[r][c] = Math.random() < 0.9 ? 2 : 4;\n  renderCell();\n}\n\nfunction renderCell() {\n  for (let r = 0; r < GRID_SIZE; r++) {\n    for (let c = 0; c < GRID_SIZE; c++) {\n      const cell = getGameField.rows[r].cells[c];\n\n      cell.className = `field-cell field-cell--${board[r][c]}`;\n      cell.textContent = board[r][c] || '';\n    }\n  }\n}\n\n// Start game\ngetButton.addEventListener('click', () => {\n  getButton.classList.toggle('start', false);\n  getButton.classList.toggle('restart', true);\n  getButton.innerText = 'Restart';\n\n  getMessageWin.classList.add('hidden');\n  getMessageLose.classList.add('hidden');\n  getMessageStart.classList.add('hidden');\n\n  initializeGame();\n});\n\ndocument.addEventListener('keydown', moveNumbers);\n\n// move numbers and score updating\nfunction moveNumbers(e) {\n  if (checkEndGame()) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    default:\n      return;\n  }\n\n  checkEndGame();\n  checkWinGame();\n}\n\nfunction cloneGameField() {\n  return board.map((row) => row.slice());\n}\n\nfunction arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i].join() !== arr2[i].join()) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction moveUp() {\n  const prevState = cloneGameField();\n  const transposedField = transpose(board);\n\n  transposedField.forEach((row, index) => {\n    const newRow = row.filter((value) => value !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] += newRow[i];\n        score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n\n    transposedField[index] = newRow.concat(\n      Array(GRID_SIZE - newRow.length).fill(0),\n    );\n  });\n\n  board = transpose(transposedField);\n\n  updateGame(prevState);\n}\n\nfunction moveDown() {\n  const prevState = cloneGameField();\n  const transposedField = transpose(board);\n\n  transposedField.forEach((row, index) => {\n    const newRow = row.filter((value) => value !== 0).reverse();\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] += newRow[i];\n        score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n\n    transposedField[index] = Array(GRID_SIZE - newRow.length)\n      .fill(0)\n      .concat(newRow.reverse());\n  });\n\n  board = transpose(transposedField);\n\n  updateGame(prevState);\n}\n\nfunction moveLeft() {\n  const prevState = cloneGameField();\n\n  board.forEach((row, index) => {\n    const newRow = row.filter((value) => value !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] += newRow[i];\n        score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n    board[index] = newRow.concat(Array(GRID_SIZE - newRow.length).fill(0));\n  });\n\n  updateGame(prevState);\n}\n\nfunction moveRight() {\n  const prevState = cloneGameField();\n\n  board.forEach((row, index) => {\n    const newRow = row.filter((value) => value !== 0).reverse();\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] += newRow[i];\n        score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n\n    board[index] = Array(GRID_SIZE - newRow.length)\n      .fill(0)\n      .concat(newRow.reverse());\n  });\n\n  updateGame(prevState);\n}\n\nfunction transpose(matrix) {\n  return matrix[0].map((_, i) => matrix.map((row) => row[i]));\n}\n\nfunction updateGame(prevState) {\n  const newState = cloneGameField();\n\n  if (!arraysEqual(prevState, newState)) {\n    setRandomCell();\n  }\n\n  getScore.textContent = score;\n  renderCell();\n}\n\n// win lose checking\nfunction checkWinGame() {\n  const found = board.some((row) => row.includes(WIN_NUM));\n\n  if (found) {\n    getMessageWin.classList.remove('hidden');\n  }\n}\n\nfunction checkAvailableMoves(boardForCheck) {\n  for (let row = 0; row < boardForCheck.length; row++) {\n    for (let col = 0; col < boardForCheck[row].length - 1; col++) {\n      if (boardForCheck[row][col] === boardForCheck[row][col + 1]) {\n        return true;\n      }\n    }\n  }\n\n  for (let col = 0; col < boardForCheck[0].length; col++) {\n    for (let row = 0; row < boardForCheck.length - 1; row++) {\n      if (boardForCheck[row][col] === boardForCheck[row + 1][col]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkEndGame() {\n  if (!isEmptyField() && !checkAvailableMoves(board)) {\n    getMessageLose.classList.remove('hidden');\n\n    return true;\n  }\n}\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}