{"mappings":"ACEA,IAAM,EAAe,SAAS,aAAa,CAAC,eACtC,EAAY,SAAS,aAAa,CAAC,WACnC,EAAW,SAAS,aAAa,CAAC,eAElC,EAAiB,SAAS,aAAa,CAAC,iBACxC,EAAgB,SAAS,aAAa,CAAC,gBACvC,EAAkB,SAAS,aAAa,CAAC,kBAK3C,EAAQ,EACR,EAAQ,EAAE,CAoBd,SAAS,IACP,OAAO,EAAM,IAAI,CAAC,SAAC,CAAnB,EAA2B,OAAA,EAAI,IAAI,CAAC,SAAC,CAAV,EAAmB,OAAA,AAAS,IAAT,C,E,EAChD,CAEA,SAAS,QAKH,EAAG,EAJP,GAAK,KAML,GACE,EAAI,KAAK,KAAK,CAAC,AApCD,EAoCC,KAAK,MAAM,IAC1B,EAAI,KAAK,KAAK,CAAC,AArCD,EAqCC,KAAK,MAAM,UACnB,AAAgB,IAAhB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAQ,AAE5B,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EACxC,IACF,CAEA,SAAS,IACP,IAAK,IAAI,EAAI,EAAG,EA7CA,EA6Ce,IAC7B,IAAK,IAAI,EAAI,EAAG,EA9CF,EA8CiB,IAAK,CAClC,IAAM,EAAO,EAAa,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,AAE1C,CAAA,EAAK,SAAS,CAAG,0BAAsC,MAAA,CAAZ,CAAK,CAAC,EAAE,CAAC,EAAE,EACtD,EAAK,WAAW,CAAG,CAAK,CAAC,EAAE,CAAC,EAAE,EAAI,EACpC,CAEJ,CAgDA,SAAS,IACP,OAAO,EAAM,GAAG,CAAC,SAAC,CAAlB,EAA0B,OAAA,EAAI,KAAK,E,EACrC,CA2GA,SAAS,EAAU,CAAM,EACvB,OAAO,CAAM,CAAC,EAAE,CAAC,GAAG,CAAC,SAAC,CAAA,CAAG,CAAzB,EAA+B,OAAA,EAAO,GAAG,CAAC,SAAC,CAAZ,EAAoB,OAAA,CAAG,CAAC,EAAE,A,E,EAC3D,CAEA,SAAS,EAAW,CAAS,EAGvB,CAAC,AAhHP,SAAqB,CAAI,CAAE,CAAI,EAC7B,GAAI,EAAK,MAAM,GAAK,EAAK,MAAM,CAC7B,MAAO,CAAA,EAGT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAC/B,GAAI,CAAI,CAAC,EAAE,CAAC,IAAI,KAAO,CAAI,CAAC,EAAE,CAAC,IAAI,GACjC,MAAO,CAAA,EAIX,MAAO,CAAA,CACT,EAoGmB,EAFA,MAGf,IAGF,EAAS,WAAW,CAAG,EACvB,GACF,CA+BA,SAAS,IACP,GAAI,CAAC,KAAkB,CAAC,AArB1B,SAA6B,CAAa,EACxC,IAAK,IAAI,EAAM,EAAG,EAAM,EAAc,MAAM,CAAE,IAC5C,IAAK,IAAI,EAAM,EAAG,EAAM,CAAa,CAAC,EAAI,CAAC,MAAM,CAAG,EAAG,IACrD,GAAI,CAAa,CAAC,EAAI,CAAC,EAAI,GAAK,CAAa,CAAC,EAAI,CAAC,EAAM,EAAE,CACzD,MAAO,CAAA,EAKb,IAAK,IAAI,EAAM,EAAG,EAAM,CAAa,CAAC,EAAE,CAAC,MAAM,CAAE,IAC/C,IAAK,IAAI,EAAM,EAAG,EAAM,EAAc,MAAM,CAAG,EAAG,IAChD,GAAI,CAAa,CAAC,EAAI,CAAC,EAAI,GAAK,CAAa,CAAC,EAAM,EAAE,CAAC,EAAI,CACzD,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EAG8C,GAG1C,OAFA,EAAe,SAAS,CAAC,MAAM,CAAC,UAEzB,CAAA,CAEX,CA5MA,EAAU,gBAAgB,CAAC,QAAS,WAClC,EAAU,SAAS,CAAC,MAAM,CAAC,QAAS,CAAA,GACpC,EAAU,SAAS,CAAC,MAAM,CAAC,UAAW,CAAA,GACtC,EAAU,SAAS,CAAG,UAEtB,EAAc,SAAS,CAAC,GAAG,CAAC,UAC5B,EAAe,SAAS,CAAC,GAAG,CAAC,UAC7B,EAAgB,SAAS,CAAC,GAAG,CAAC,UAhD9B,EAAQ,MAAM,IAAI,CAAC,CAAE,OAfL,CAeuB,EAAG,WAAM,MAAA,MAAM,CAAW,IAAI,CAAC,E,GACtE,IAPA,IACA,IAUA,EAAS,WAAW,CAnBA,CAiEtB,GAEA,SAAS,gBAAgB,CAAC,UAG1B,SAAqB,CAAC,EACpB,IAAI,SAgDE,EACA,EAwBA,EACA,EAwBA,EAmBA,EAjHN,OAAQ,EAAE,GAAG,EACX,IAAK,UA2CD,EAAY,IAGlB,CAFM,EAAkB,EAAU,IAElB,OAAO,CAAC,SAAC,CAAA,CAAK,CAA9B,EAGE,IAAK,IAFC,EAAS,EAAI,MAAM,CAAC,SAAC,CAA3B,EAAqC,OAAA,AAAU,IAAV,C,GAE5B,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,CAAM,CAAC,EAAE,CACtB,GAAS,CAAM,CAAC,EAAE,CAClB,EAAO,MAAM,CAAC,EAAI,EAAG,GAIzB,CAAA,CAAe,CAAC,EAAM,CAAG,EAAO,MAAM,CACpC,MAAM,AAvIM,EAuIM,EAAO,MAAM,EAAE,IAAI,CAAC,GAE1C,GAEA,EAAQ,EAAU,GAElB,EAAW,GA9DP,KAEF,KAAK,YAgED,EAAY,IAGlB,CAFM,EAAkB,EAAU,IAElB,OAAO,CAAC,SAAC,CAAA,CAAK,CAA9B,EAGE,IAAK,IAFC,EAAS,EAAI,MAAM,CAAC,SAAC,CAA3B,EAAqC,OAAA,AAAU,IAAV,CAAa,GAAA,OAAO,GAEhD,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,CAAM,CAAC,EAAE,CACtB,GAAS,CAAM,CAAC,EAAE,CAClB,EAAO,MAAM,CAAC,EAAI,EAAG,GAIzB,CAAA,CAAe,CAAC,EAAM,CAAG,MAAM,AA/JjB,EA+J6B,EAAO,MAAM,EACrD,IAAI,CAAC,GACL,MAAM,CAAC,EAAO,OAAO,GAC1B,GAEA,EAAQ,EAAU,GAElB,EAAW,GAnFP,KAEF,KAAK,YAqFD,EAAY,IAElB,EAAM,OAAO,CAAC,SAAC,CAAA,CAAK,CAApB,EAGE,IAAK,IAFC,EAAS,EAAI,MAAM,CAAC,SAAC,CAA3B,EAAqC,OAAA,AAAU,IAAV,C,GAE5B,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,CAAM,CAAC,EAAE,CACtB,GAAS,CAAM,CAAC,EAAE,CAClB,EAAO,MAAM,CAAC,EAAI,EAAG,GAGzB,CAAA,CAAK,CAAC,EAAM,CAAG,EAAO,MAAM,CAAC,MAAM,AAtLrB,EAsLiC,EAAO,MAAM,EAAE,IAAI,CAAC,GACrE,GAEA,EAAW,GAlGP,KAEF,KAAK,aAoGD,EAAY,IAElB,EAAM,OAAO,CAAC,SAAC,CAAA,CAAK,CAApB,EAGE,IAAK,IAFC,EAAS,EAAI,MAAM,CAAC,SAAC,CAA3B,EAAqC,OAAA,AAAU,IAAV,CAAa,GAAA,OAAO,GAEhD,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,CAAM,CAAC,EAAE,CACtB,GAAS,CAAM,CAAC,EAAE,CAClB,EAAO,MAAM,CAAC,EAAI,EAAG,GAIzB,CAAA,CAAK,CAAC,EAAM,CAAG,MAAM,AA1MP,EA0MmB,EAAO,MAAM,EAC3C,IAAI,CAAC,GACL,MAAM,CAAC,EAAO,OAAO,GAC1B,GAEA,EAAW,GApHP,KAEF,SACE,MACJ,CAEA,IAkIc,EAAM,IAAI,CAAC,SAAC,CAA1B,EAAkC,OAAA,EAAI,QAAQ,CAjOhC,K,IAoOZ,EAAc,SAAS,CAAC,MAAM,CAAC,UAnInC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar getGameField = document.querySelector(\".game-field\");\nvar getButton = document.querySelector(\".button\");\nvar getScore = document.querySelector(\".game-score\");\nvar getMessageLose = document.querySelector(\".message-lose\");\nvar getMessageWin = document.querySelector(\".message-win\");\nvar getMessageStart = document.querySelector(\".message-start\");\nvar GRID_SIZE = 4;\nvar INITIAL_SCORE = 0;\nvar WIN_NUM = 2048;\nvar score = 0;\nvar board = [];\n// Initialize Game\nfunction initializeGame() {\n    resetGameBoard();\n    setRandomCell();\n    setRandomCell();\n    updateScore();\n}\nfunction resetGameBoard() {\n    board = Array.from({\n        length: GRID_SIZE\n    }, function() {\n        return Array(GRID_SIZE).fill(0);\n    });\n    renderCell();\n}\nfunction updateScore() {\n    getScore.textContent = INITIAL_SCORE;\n}\n// Set random cells\nfunction isEmptyField() {\n    return board.some(function(row) {\n        return row.some(function(cell) {\n            return cell === 0;\n        });\n    });\n}\nfunction setRandomCell() {\n    if (!isEmptyField()) return;\n    var r, c;\n    do {\n        r = Math.floor(Math.random() * GRID_SIZE);\n        c = Math.floor(Math.random() * GRID_SIZE);\n    }while (board[r][c] !== 0);\n    board[r][c] = Math.random() < 0.9 ? 2 : 4;\n    renderCell();\n}\nfunction renderCell() {\n    for(var r = 0; r < GRID_SIZE; r++)for(var c = 0; c < GRID_SIZE; c++){\n        var cell = getGameField.rows[r].cells[c];\n        cell.className = \"field-cell field-cell--\".concat(board[r][c]);\n        cell.textContent = board[r][c] || \"\";\n    }\n}\n// Start game\ngetButton.addEventListener(\"click\", function() {\n    getButton.classList.toggle(\"start\", false);\n    getButton.classList.toggle(\"restart\", true);\n    getButton.innerText = \"Restart\";\n    getMessageWin.classList.add(\"hidden\");\n    getMessageLose.classList.add(\"hidden\");\n    getMessageStart.classList.add(\"hidden\");\n    initializeGame();\n});\ndocument.addEventListener(\"keydown\", moveNumbers);\n// move numbers and score updating\nfunction moveNumbers(e) {\n    if (checkEndGame()) return;\n    switch(e.key){\n        case \"ArrowUp\":\n            moveUp();\n            break;\n        case \"ArrowDown\":\n            moveDown();\n            break;\n        case \"ArrowLeft\":\n            moveLeft();\n            break;\n        case \"ArrowRight\":\n            moveRight();\n            break;\n        default:\n            return;\n    }\n    checkEndGame();\n    checkWinGame();\n}\nfunction cloneGameField() {\n    return board.map(function(row) {\n        return row.slice();\n    });\n}\nfunction arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    for(var i = 0; i < arr1.length; i++){\n        if (arr1[i].join() !== arr2[i].join()) return false;\n    }\n    return true;\n}\nfunction moveUp() {\n    var prevState = cloneGameField();\n    var transposedField = transpose(board);\n    transposedField.forEach(function(row, index) {\n        var newRow = row.filter(function(value) {\n            return value !== 0;\n        });\n        for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] += newRow[i];\n            score += newRow[i];\n            newRow.splice(i + 1, 1);\n        }\n        transposedField[index] = newRow.concat(Array(GRID_SIZE - newRow.length).fill(0));\n    });\n    board = transpose(transposedField);\n    updateGame(prevState);\n}\nfunction moveDown() {\n    var prevState = cloneGameField();\n    var transposedField = transpose(board);\n    transposedField.forEach(function(row, index) {\n        var newRow = row.filter(function(value) {\n            return value !== 0;\n        }).reverse();\n        for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] += newRow[i];\n            score += newRow[i];\n            newRow.splice(i + 1, 1);\n        }\n        transposedField[index] = Array(GRID_SIZE - newRow.length).fill(0).concat(newRow.reverse());\n    });\n    board = transpose(transposedField);\n    updateGame(prevState);\n}\nfunction moveLeft() {\n    var prevState = cloneGameField();\n    board.forEach(function(row, index) {\n        var newRow = row.filter(function(value) {\n            return value !== 0;\n        });\n        for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] += newRow[i];\n            score += newRow[i];\n            newRow.splice(i + 1, 1);\n        }\n        board[index] = newRow.concat(Array(GRID_SIZE - newRow.length).fill(0));\n    });\n    updateGame(prevState);\n}\nfunction moveRight() {\n    var prevState = cloneGameField();\n    board.forEach(function(row, index) {\n        var newRow = row.filter(function(value) {\n            return value !== 0;\n        }).reverse();\n        for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] += newRow[i];\n            score += newRow[i];\n            newRow.splice(i + 1, 1);\n        }\n        board[index] = Array(GRID_SIZE - newRow.length).fill(0).concat(newRow.reverse());\n    });\n    updateGame(prevState);\n}\nfunction transpose(matrix) {\n    return matrix[0].map(function(_, i) {\n        return matrix.map(function(row) {\n            return row[i];\n        });\n    });\n}\nfunction updateGame(prevState) {\n    var newState = cloneGameField();\n    if (!arraysEqual(prevState, newState)) setRandomCell();\n    getScore.textContent = score;\n    renderCell();\n}\n// win lose checking\nfunction checkWinGame() {\n    var found = board.some(function(row) {\n        return row.includes(WIN_NUM);\n    });\n    if (found) getMessageWin.classList.remove(\"hidden\");\n}\nfunction checkAvailableMoves(boardForCheck) {\n    for(var row = 0; row < boardForCheck.length; row++)for(var col = 0; col < boardForCheck[row].length - 1; col++){\n        if (boardForCheck[row][col] === boardForCheck[row][col + 1]) return true;\n    }\n    for(var col1 = 0; col1 < boardForCheck[0].length; col1++)for(var row1 = 0; row1 < boardForCheck.length - 1; row1++){\n        if (boardForCheck[row1][col1] === boardForCheck[row1 + 1][col1]) return true;\n    }\n    return false;\n}\nfunction checkEndGame() {\n    if (!isEmptyField() && !checkAvailableMoves(board)) {\n        getMessageLose.classList.remove(\"hidden\");\n        return true;\n    }\n}\n\n//# sourceMappingURL=index.7e253087.js.map\n","'use strict';\n\nconst getGameField = document.querySelector('.game-field');\nconst getButton = document.querySelector('.button');\nconst getScore = document.querySelector('.game-score');\n\nconst getMessageLose = document.querySelector('.message-lose');\nconst getMessageWin = document.querySelector('.message-win');\nconst getMessageStart = document.querySelector('.message-start');\n\nconst GRID_SIZE = 4;\nconst INITIAL_SCORE = 0;\nconst WIN_NUM = 2048;\nlet score = 0;\nlet board = [];\n\n// Initialize Game\nfunction initializeGame() {\n  resetGameBoard();\n  setRandomCell();\n  setRandomCell();\n  updateScore();\n}\n\nfunction resetGameBoard() {\n  board = Array.from({ length: GRID_SIZE }, () => Array(GRID_SIZE).fill(0));\n  renderCell();\n}\n\nfunction updateScore() {\n  getScore.textContent = INITIAL_SCORE;\n}\n\n// Set random cells\nfunction isEmptyField() {\n  return board.some((row) => row.some((cell) => cell === 0));\n}\n\nfunction setRandomCell() {\n  if (!isEmptyField()) {\n    return;\n  }\n\n  let r, c;\n\n  do {\n    r = Math.floor(Math.random() * GRID_SIZE);\n    c = Math.floor(Math.random() * GRID_SIZE);\n  } while (board[r][c] !== 0);\n\n  board[r][c] = Math.random() < 0.9 ? 2 : 4;\n  renderCell();\n}\n\nfunction renderCell() {\n  for (let r = 0; r < GRID_SIZE; r++) {\n    for (let c = 0; c < GRID_SIZE; c++) {\n      const cell = getGameField.rows[r].cells[c];\n\n      cell.className = `field-cell field-cell--${board[r][c]}`;\n      cell.textContent = board[r][c] || '';\n    }\n  }\n}\n\n// Start game\ngetButton.addEventListener('click', () => {\n  getButton.classList.toggle('start', false);\n  getButton.classList.toggle('restart', true);\n  getButton.innerText = 'Restart';\n\n  getMessageWin.classList.add('hidden');\n  getMessageLose.classList.add('hidden');\n  getMessageStart.classList.add('hidden');\n\n  initializeGame();\n});\n\ndocument.addEventListener('keydown', moveNumbers);\n\n// move numbers and score updating\nfunction moveNumbers(e) {\n  if (checkEndGame()) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    default:\n      return;\n  }\n\n  checkEndGame();\n  checkWinGame();\n}\n\nfunction cloneGameField() {\n  return board.map((row) => row.slice());\n}\n\nfunction arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i].join() !== arr2[i].join()) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction moveUp() {\n  const prevState = cloneGameField();\n  const transposedField = transpose(board);\n\n  transposedField.forEach((row, index) => {\n    const newRow = row.filter((value) => value !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] += newRow[i];\n        score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n\n    transposedField[index] = newRow.concat(\n      Array(GRID_SIZE - newRow.length).fill(0),\n    );\n  });\n\n  board = transpose(transposedField);\n\n  updateGame(prevState);\n}\n\nfunction moveDown() {\n  const prevState = cloneGameField();\n  const transposedField = transpose(board);\n\n  transposedField.forEach((row, index) => {\n    const newRow = row.filter((value) => value !== 0).reverse();\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] += newRow[i];\n        score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n\n    transposedField[index] = Array(GRID_SIZE - newRow.length)\n      .fill(0)\n      .concat(newRow.reverse());\n  });\n\n  board = transpose(transposedField);\n\n  updateGame(prevState);\n}\n\nfunction moveLeft() {\n  const prevState = cloneGameField();\n\n  board.forEach((row, index) => {\n    const newRow = row.filter((value) => value !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] += newRow[i];\n        score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n    board[index] = newRow.concat(Array(GRID_SIZE - newRow.length).fill(0));\n  });\n\n  updateGame(prevState);\n}\n\nfunction moveRight() {\n  const prevState = cloneGameField();\n\n  board.forEach((row, index) => {\n    const newRow = row.filter((value) => value !== 0).reverse();\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] += newRow[i];\n        score += newRow[i];\n        newRow.splice(i + 1, 1);\n      }\n    }\n\n    board[index] = Array(GRID_SIZE - newRow.length)\n      .fill(0)\n      .concat(newRow.reverse());\n  });\n\n  updateGame(prevState);\n}\n\nfunction transpose(matrix) {\n  return matrix[0].map((_, i) => matrix.map((row) => row[i]));\n}\n\nfunction updateGame(prevState) {\n  const newState = cloneGameField();\n\n  if (!arraysEqual(prevState, newState)) {\n    setRandomCell();\n  }\n\n  getScore.textContent = score;\n  renderCell();\n}\n\n// win lose checking\nfunction checkWinGame() {\n  const found = board.some((row) => row.includes(WIN_NUM));\n\n  if (found) {\n    getMessageWin.classList.remove('hidden');\n  }\n}\n\nfunction checkAvailableMoves(boardForCheck) {\n  for (let row = 0; row < boardForCheck.length; row++) {\n    for (let col = 0; col < boardForCheck[row].length - 1; col++) {\n      if (boardForCheck[row][col] === boardForCheck[row][col + 1]) {\n        return true;\n      }\n    }\n  }\n\n  for (let col = 0; col < boardForCheck[0].length; col++) {\n    for (let row = 0; row < boardForCheck.length - 1; row++) {\n      if (boardForCheck[row][col] === boardForCheck[row + 1][col]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkEndGame() {\n  if (!isEmptyField() && !checkAvailableMoves(board)) {\n    getMessageLose.classList.remove('hidden');\n\n    return true;\n  }\n}\n"],"names":["getGameField","document","querySelector","getButton","getScore","getMessageLose","getMessageWin","getMessageStart","score","board","isEmptyField","some","row","cell","setRandomCell","r","c","Math","floor","random","renderCell","rows","cells","className","concat","textContent","cloneGameField","map","slice","transpose","matrix","_","i","updateGame","prevState","arraysEqual","arr1","arr2","length","join","checkEndGame","checkAvailableMoves","boardForCheck","col","col1","row1","classList","remove","addEventListener","toggle","innerText","add","Array","from","fill","e","transposedField","key","forEach","index","newRow","filter","value","splice","GRID_SIZE","reverse","includes"],"version":3,"file":"index.7e253087.js.map"}